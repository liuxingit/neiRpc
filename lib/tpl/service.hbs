/**
 * 类名：{{item.sClassName}}
 */
import { RPCService } from '@kapp/dubbojs';

class {{item.className}} extends RPCService {
   static config(groups) {
       return {
           interface: '{{item.fullClassName}}',
           {{#ifExpress item.protocol 'dubbo'}}
           dubboVersion: '3.0.5.1',
           version: '1.0',
           {{else}}
           jsonRpcVersion: '2.0',å
           {{/ifExpress}}
           group: groups.default,
           protocol: '{{item.protocol}}',
           timeout: 3000,
           // 可选
           pool: {
               min: 2,
               max: 10,
               maxWaitingClients: 10,
               keepAlive: true
           }
       }
   };

    {{#each item.paths}}

    /**
     * {{sClassName}}
     * name：{{name}}
     * desc：{{description}}
     * 接口名：/api/{{sClassName}}/{{path}}
     * 负责人：{{realname}}
     */
    
    public async {{path}}({{#each params}}{{name}}{{#if @last}}{{else}}, {{/if}}{{/each}}) {
        return this.invoke('{{path}}', [
        {{#ifExpress protocol 'dubbo'}}
            {{#each params}}
            {
                $class: '{{#if datatypeName}}{{datatypeName}}{{else}}java.lang.{{typeName}}{{/if}}',
                $: {{name}}
            {{#if @last}}
            }
            {{else}}
            }, {{/if}}
            {{/each}}
        {{else}}
            {{#each params}}{{name}}{{#if @last}}{{else}}, {{/if}}{{/each}}
        {{/ifExpress}}
        ], ['X-Requested-With: XMLHttpRequest'], { 
            retry: 3,
            mock: {
                resCode: 500,
                resDesc: '服务请求失败'
            }
        });
    }
    {{/each}}
}

export default {{item.className}};